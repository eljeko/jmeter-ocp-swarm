apiVersion: v1
kind: Template
metadata:
  name: load-test-pipeline-temlate
  annotations:
    description: "Template fot jmeter pipelien stages"
    tags: "cicd,jnekins,pipeline,jmeter"
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: jmeter-${APPLICATION_NAME}
    labels:
      name: jmeter-${APPLICATION_NAME}
  spec:
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node ("maven") {

            jenkinsUser = "${JENKINS_USER}"    // Set username for Jenkins
            jenkinsPass = "${JENKINS_PWD_TOKEN}"    // Set API token for Jenkins

            def SERVERS_LIST_CALL
            def SLEEP=5

            stage ("Setup Envirornment") {
              env.TIME_STAMP = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone('UTC'))

              sh "oc delete all -l application=jmeter-controller-job-template"
              sh "oc delete all -l job-name=jmeter-controller-job-$TIME_STAMP"
              sh "oc delete all -l app=${APPLICATION_NAME}-jmeter-slave"

              while ({
                SLAVE_STATUSES = sh (
                  script: "oc get pods -l app=${APPLICATION_NAME}-jmeter-slave  -o=custom-columns=Name:.metadata.name --no-headers=true || true",
                  returnStdout: true
                ).split()

                sleep SLEEP

                println "The length of the array is: " + SLAVE_STATUSES.size()
                println "The the array is: " + SLAVE_STATUSES
                SLAVE_STATUSES.size() != 0

              }()) continue

              sh "oc new-app --name=${APPLICATION_NAME}-jmeter-slave --image-stream=jmeter-server-remote"
              sh "oc scale dc/${APPLICATION_NAME}-jmeter-slave --replicas=${CONCURRENT_LAUNCHER}"

              while ({
                SLAVE_STATUSES = sh (
                  script: "oc get pods -l app=${APPLICATION_NAME}-jmeter-slave  -o=custom-columns=STATUS:.status.phase --no-headers=true || true",
                  returnStdout: true
                ).split()

                sleep SLEEP
                println "The length of the array is: " + SLAVE_STATUSES.size()
                println "The the array is: " + SLAVE_STATUSES

                SLAVE_STATUSES.count { it.startsWith('Running') } != ${CONCURRENT_LAUNCHER}

              }()) continue

              SERVERS_LIST_CALL = sh (
                script: "oc describe pods -l app=${APPLICATION_NAME}-jmeter-slave|grep IP|awk '{print \$2'}| tr '\n' ','| sed 's/,\$//'",
                returnStdout: true
              ).trim()
            }

            stage ("Executing Load test") {

              sh "curl https://raw.githubusercontent.com/eljeko/jmeter-ocp-swarm/master/jmeter-controller/demo/jmeter-job-template.yaml > jmeter-job-template.yaml"

              env.SERVERS_LIST = SERVERS_LIST_CALL
              env.JMX_FILE_URL = "${JMX_FILE_URL}"

              sh "env"

              //Currently commented because https://issues.jenkins-ci.org/browse/JENKINS-16225
              inputURL = env.BUILD_URL + "input/Jmeter-${APPLICATION_NAME}/submit"

              println "The inputURL: " + inputURL

              sh "oc process -f jmeter-job-template.yaml -p TIMESTAMP=$TIME_STAMP -p TEST_PLAN_URL=$JMX_FILE_URL -p REMOTE_SERVERS_LIST=$SERVERS_LIST -p JENKINS_PIPELINE_RETURN_URL=${inputURL} -p APPLICATION_NAME=${APPLICATION_NAME} -p JENKINS_USER=${jenkinsUser} -p JENKINS_PASS=${jenkinsPass} -o yaml --local=true|oc create -f -"

              // Block and wait for job to return with results file
              // The input ID is what creates the unique return URL for curling back
              print "Waiting for results from JMeter test job..."
              def inputFile = input id: "Jmeter-${APPLICATION_NAME}",
                message: 'Waiting for JMeter results...',
                parameters: [
                  file(description: 'Performance Test Results ${APPLICATION_NAME}',
                  name: "Jmeter-${APPLICATION_NAME}")  // This must match the name param in runjob.sh
                  ]

              // Running Performance Plugin with JMeter to show results
              // The results JTL file is saved on the master Jenkins node,
              // inputFile.toString() gives you the absolute path of the file to parse
              //
              // These threshold values can be whatever you like
              performanceReport compareBuildPrevious: false,
                configType: 'ART',
                errorFailedThreshold: 0,
                errorUnstableResponseTimeThreshold: '',
                errorUnstableThreshold: 0,
                failBuildIfNoResultFile: false,
                ignoreFailedBuild: false,
                ignoreUnstableBuild: true,
                modeOfThreshold: false,
                modePerformancePerTestCase: true,
                modeThroughput: true,
                nthBuildNumber: 0,
                parsers: [[$class: 'JMeterParser', glob: inputFile.toString()]],
                relativeFailedThresholdNegative: 0,
                relativeFailedThresholdPositive: 0,
                relativeUnstableThresholdNegative: 0,
                relativeUnstableThresholdPositive: 0
            }

            stage ("Collecting results") {
              POD_JOB_NAME = sh (
                script: "oc get pods -l job-name=jmeter-controller-job-$TIME_STAMP  -o=custom-columns=POD:.metadata.name --no-headers=true",
                returnStdout: true
              ).trim()

              env.POD_JOB_NAME = POD_JOB_NAME

              //A slee to wait for pod to flush all logs.
              sleep SLEEP

              JOB_RESULT = sh (
                script: "oc logs $POD_JOB_NAME|grep summary",
                returnStdout: true
              ).trim()

              echo JOB_RESULT
            }

            stage ("Cleaningup Envirornment") {
                sh "oc delete all -l job-name=jmeter-controller-job-$TIME_STAMP"
                sh "oc delete all -l app=${APPLICATION_NAME}-jmeter-slave"
            }
          }
parameters:
- description: Url of the jmeter jmx project
  name: JMX_FILE_URL
  value: https://raw.githubusercontent.com/eljeko/jmeter-ocp-swarm/master/web-app/cool-app-heavy-jmeter.jmx
  required: true
- description: The application name
  name: APPLICATION_NAME
  value: cool-app
  required: true
- description: Url of the jmeter jmx project
  name: CONCURRENT_LAUNCHER
  value: "2"
  required: true
- description: Jenkins Username for callback
  name: JENKINS_USER
  required: true
- description: Jenkins Password or token for callback
  name: JENKINS_PWD_TOKEN
  required: true
labels:
  redis: master
