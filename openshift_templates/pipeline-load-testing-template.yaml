apiVersion: v1
kind: Template
metadata:
  name: load-test-pipeline-temlate
  annotations:
    description: "Template fot jmeter pipelien stages"
    tags: "cicd,jnekins,pipeline,jmeter"
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: jmeter-${APPLICATION_NAME}
    labels:
      name: jmeter-${APPLICATION_NAME}
  spec:
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node ("maven") {
            def jmeter_slaves_ip //This will contains the jmeter slave IPs
            def SLEEP=3 //Timeout wait
            def inputFile //Jmeter test Feedback file

            jenkinsUser = "${JENKINS_USER}"    // Set username for Jenkins
            jenkinsPass = "${JENKINS_PWD_TOKEN}"    // Set API token for Jenkins

            stage ("Setup Envirornment") {
              openshift.withCluster() { // Use "default" cluster or fallback to OpenShift cluster detection
                echo "Hello from the project running Jenkins: ${openshift.project()}"
              }

              env.TIME_STAMP = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone('UTC'))

              sh "oc delete all -l application=jmeter-controller-job-template"
              sh "oc delete all -l job-name=jmeter-controller-job-$TIME_STAMP"
              sh "oc delete all -l app=${APPLICATION_NAME}-jmeter-slave"

              while ({
                SLAVE_STATUSES = sh (
                  script: "oc get pods -l app=${APPLICATION_NAME}-jmeter-slave  -o=custom-columns=Name:.metadata.name --no-headers=true || true",
                  returnStdout: true
                ).split()
                sleep SLEEP
                println "The actual number of Jmeter slave pods is: " + SLAVE_STATUSES.size()
                println "Jmeter slave pods names: " + SLAVE_STATUSES
                SLAVE_STATUSES.size() != 0
              }()) continue

              println "No Jmeter slave nodes are running"

              sh "oc new-app --name=${APPLICATION_NAME}-jmeter-slave --image-stream=jmeter-server-remote"
              sh "oc scale dc/${APPLICATION_NAME}-jmeter-slave --replicas=${CONCURRENT_LAUNCHER}"


              openshift.withCluster() {
                  //openshift.verbose()
                  openshift.withProject(){
                  def latestDeploymentVersion = openshift.selector('dc',"${APPLICATION_NAME}-jmeter-slave").object().status.latestVersion
                  echo "latestVersion: " + latestDeploymentVersion
                  def rc = openshift.selector('rc', "${APPLICATION_NAME}-jmeter-slave-${latestDeploymentVersion}")
                  echo "rc: " + rc
                  rc.untilEach(1){
                    def rcMap = it.object()
                    return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                  }
                }
              }

              //Getting the IPs of the Jmeter Slave nodes
              jmeter_slaves_ip = sh (
                script: "oc describe pods -l app=${APPLICATION_NAME}-jmeter-slave|grep IP|awk '{print \$2'}| tr '\n' ','| sed 's/,\$//'",
                returnStdout: true
              ).trim()
              echo "Servers list: " + jmeter_slaves_ip
            }

            stage ("Executing Load test") {

              sh "curl ${JMETER_JOB_TEMPLATE_URL} > jmeter-job-template.yaml"
              // Get latest JMeter image from project to assign to job template
              String imageURL = sh (
                script:"""
                  oc get is/jmeter-controller  --output=jsonpath={.status.dockerImageRepository}
                  """,
                returnStdout: true
              )

              //Currently commented because https://issues.jenkins-ci.org/browse/JENKINS-16225
              jenkins_callback_input_url = env.BUILD_URL + "input/Jmeter-${APPLICATION_NAME}/submit"
              println "The jenkins_callback_input_url: " + jenkins_callback_input_url
              sh "oc process -f jmeter-job-template.yaml -p TIMESTAMP=$TIME_STAMP -p TEST_PLAN_URL=${JMETER_TEST_FILE_URL} -p REMOTE_SERVERS_LIST=${jmeter_slaves_ip} -p JENKINS_PIPELINE_RETURN_URL=${jenkins_callback_input_url} -p APPLICATION_NAME=${APPLICATION_NAME} -p JENKINS_USER=${jenkinsUser} -p JENKINS_PASS=${jenkinsPass} -p IMAGE=${imageURL}:latest -o yaml --local=true|oc create -f -"

              // Block and wait for job to return with results file
              // The input ID is what creates the unique return URL for curling back
              print "Waiting for results from JMeter test job..."
              inputFile = input id: "Jmeter-${APPLICATION_NAME}",
                message: 'Waiting for JMeter results...',
                parameters: [
                  file(description: 'Performance Test Results ${APPLICATION_NAME}',
                  name: "Jmeter-${APPLICATION_NAME}")  // This must match the name param in runjob.sh
                  ]

            }

            stage ("Collecting results") {
              // Running Performance Plugin with JMeter to show results
              // The results JTL file is saved on the master Jenkins node,
              // inputFile.toString() gives you the absolute path of the file to parse
              //
              // These threshold values can be whatever you like
              performanceReport compareBuildPrevious: true,
                configType: 'ART',
                errorFailedThreshold: 0,
                errorUnstableResponseTimeThreshold: 'Jmeter-${APPLICATION_NAME}:10',
                errorUnstableThreshold: 0,
                failBuildIfNoResultFile: true,
                ignoreFailedBuild: false,
                ignoreUnstableBuild: false,
                modeOfThreshold: true,
                modePerformancePerTestCase: true,
                modeThroughput: true,
                parsers: [[$class: 'JMeterParser', glob: inputFile.toString()]],
                relativeFailedThresholdNegative: 500,
                relativeFailedThresholdPositive: 20,
                relativeUnstableThresholdNegative: 500,
                relativeUnstableThresholdPositive: 10
            }

            stage ("Cleaningup Envirornment") {
                sh "oc delete all -l job-name=jmeter-controller-job-$TIME_STAMP"
                sh "oc delete all -l app=${APPLICATION_NAME}-jmeter-slave"
            }
          }
parameters:
- description: Url of the jmeter jmx project
  name: JMETER_TEST_FILE_URL
  required: true
- description: Jenkins Password or token for callback
  name: JMETER_JOB_TEMPLATE_URL
  required: true
- description: The application name
  name: APPLICATION_NAME
  value: cool-app
  required: true
- description: Url of the jmeter jmx project
  name: CONCURRENT_LAUNCHER
  value: "2"
  required: true
- description: Jenkins Username for callback
  name: JENKINS_USER
  required: true
- description: Jenkins Password or token for callback
  name: JENKINS_PWD_TOKEN
  required: true
labels:
  redis: master
